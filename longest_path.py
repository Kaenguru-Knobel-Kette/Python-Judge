#!/usr/bin/env python3
import os
import judge
from time import process_time


def read_input():
    inputs = list()  # a list containing inputs from all files
    for file in input_files:
        input = list()  # input from a single file
        with open(file) as fh:
            for i in range(0, int(fh.readline())):
                first_line = [int(i) for i in fh.readline().split()]
                n = first_line[0]
                v_in = [list() for i in range(0, n)]
                v_out = [list() for i in range(0, n)]
                next_line = [int(i) for i in fh.readline().split()]
                for i in range(0, 2 * first_line[1], 2):
                    v_in[next_line[i + 1]].append(next_line[i])
                    v_out[next_line[i]].append(next_line[i + 1])
                input.append((v_in, v_out))
        inputs.append(input)
    return inputs


def find_longest_path(input):
    """finds the longest path in a directed acyclic graph"""
    n = input[0]  # number of edges
    v_in = input[1]  # for each vertex a list with all incoming edges
    v_out = input[2]  # for each vertex a list with all outgoing edges


# path to the local test files
path = "testdata/DnA-longest-path/"
input_files = [os.path.join(path, file) for file in os.listdir(path) if file.endswith(".input")]
output_files = [os.path.join(path, file) for file in os.listdir(path) if file.endswith(".output")]
input_files.sort()
output_files.sort()
# inputs from the test files
inputs = read_input()
# outputs generated by the algorithm
start_time = process_time()
outputs = list()
for input in inputs:
    outputs.append([find_longest_path(case) for case in input])
end_time = process_time()

judge.run(output_files, outputs, end_time - start_time)
