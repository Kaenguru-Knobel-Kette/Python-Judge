#!/usr/bin/env python3
import judge
from time import process_time


def f(x):
    """special function that should be treated as blackbox"""
    r = 0
    z = x
    while z > 0:
        r += x
        z = int(z / 2)
    return r


def value_search(a):
    """binary function value search"""
    result = []
    for i in range(0, len(a)):
        l = 0
        r = 20000000
        while l <= r:
            x = (l + r) // 2
            if f(x) == a[i]:
                break
            if f(x) < a[i]:
                l = x + 1
            else:
                r = x - 1
        else:
            result.append("NO")
            continue
        result.append(x)
    return result


# A&D programming exercise number
exercise = 5
# inputs from the test files
inputs = judge.read_input(exercise)
# outputs generated by the algorithm
start_time = process_time()
outputs = list()
for input in inputs:
    try:
        outputs.append([value_search(case) for case in input])
    except TypeError:  # in case input isn't an iterable object
        outputs.append(value_search(input))
end_time = process_time()

judge.verify_output(exercise, outputs, end_time - start_time)
