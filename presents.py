#!/usr/bin/env python3
import judge
from time import process_time


def match_ribbons(input):
    lengths = input[0]
    areas = input[1]
    i = 0  # index iterating over areas
    count = 0
    for l in lengths:
        l = l ** 2 / 16
        # a ribbon fits if sqrt(a) == l/4 or a == l^2/16
        while areas[i] < l and i < len(areas) - 1:
            i += 1
        if areas[i] == l:
            # ribbon fits, advance to next ribbon
            i += 1
            count += 1
    return [count]


# A&D programming exercise number
exercise = 7
# inputs from the test files
inputs = judge.read_input(exercise)
# outputs generated by the algorithm
start_time = process_time()
outputs = list()
for input in inputs:
    try:
        outputs.append([match_ribbons(case) for case in input])
    except TypeError:  # in case input isn't an iterable object
        outputs.append(match_ribbons(input))
end_time = process_time()

judge.verify_output(exercise, outputs, end_time - start_time)
