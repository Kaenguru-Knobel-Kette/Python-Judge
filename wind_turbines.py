#!/usr/bin/env python3
import judge
from time import process_time


def max_energy_yield(input):
    """calculates the maximal total energy yield"""
    D = input[0]  # minimal distance between two turbines
    d = input[1]  # distances of the turbines from the start
    e = input[2]  # produced energy of the associated turbine
    DP = [e[0]]  # DP[i] holds the maximal energy yield up to position i
    for i in range(1, len(d)):
        DP.append(0)

    for i in range(1, len(d)):
        # find the first turbine that's more than D meters before position i
        j = i
        while d[i] - d[j] < D and j > -1:
            j -= 1
        if j == -1:  # no previous turbine exists
            DP[i] = max(e[i], DP[i - 1])
        else:
            DP[i] = max(e[i] + DP[j], DP[i - 1])
    return DP[len(DP) - 1]  # last entry holds the maximal energy yield


# A&D programming exercise number
exercise = 8
# inputs from the test files
inputs = judge.read_input(exercise)
# outputs generated by the algorithm
start_time = process_time()
outputs = list()
for input in inputs:
    try:
        outputs.append([max_energy_yield(case) for case in input])
    except TypeError:  # in case input isn't an iterable object
        outputs.append(max_energy_yield(input))
end_time = process_time()

judge.verify_output(exercise, outputs, end_time - start_time)
