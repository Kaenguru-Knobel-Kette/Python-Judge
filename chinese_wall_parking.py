#!/usr/bin/env python3
import os
import judge
from time import process_time


def read_input():
    inputs = list()  # a list containing inputs from all files
    for file in input_files:
        with open(file) as fh:
            fh.readline()  # skip line because it's only for Java's Scanner
            input = [int(i) for i in fh.readline().split()]
            inputs.append(input)
    return inputs


def chinese_wall_parking(A):
    """finds the minimal number of car moves required to fulfill the law"""
    B = []  # was this car used in a cycle already?
    for a in A:
        B.append(False)
    moves = 0
    for i in range(0, len(A)):
        if A[i] == i or B[i]:
            # no need to move a car that's already in the right place
            # or to check a car that was already part of a cycle
            continue
        # the car at place i needs to be moved
        moves += 1
        B[i] = True  # mark that this car was part of a cycle
        next_car = A[i]
        # all cars in this cycle and need to be moved
        while next_car != i:
            moves += 1
            B[next_car] = True
            next_car = A[next_car]
        # one more move required to move the first car to the empty space
        moves += 1
    return [moves]


# path to the local test files
path = "testdata/DnA-chinese-wall-parking/"
input_files = [os.path.join(path, file) for file in os.listdir(path) if file.endswith(".input")]
output_files = [os.path.join(path, file) for file in os.listdir(path) if file.endswith(".output")]
input_files.sort()
output_files.sort()
# inputs from the test files
inputs = read_input()
# outputs generated by the algorithm
start_time = process_time()
outputs = list()
for input in inputs:
    outputs.append(chinese_wall_parking(input))
end_time = process_time()

judge.run(output_files, outputs, end_time - start_time)
