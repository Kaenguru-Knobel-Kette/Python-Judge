#!/usr/bin/env python3
import os
import judge
from time import process_time


def read_input():
    inputs = list()  # a list containing inputs from all files
    for file in input_files:
        input = list()  # input from a single file
        with open(file) as fh:
            input = [int(i) for i in fh.readline().split()]
            # remove first integer because it's only for Java's Scanner
            input.remove(input[0])
            inputs.append(input)
    return inputs


def maximum_subarrays_sum(A):
    """returns the maximum subarray sum"""
    total_max = 0
    temp_max = 0
    for i in A:
        temp_max += i
        if temp_max < 0:
            temp_max = 0
        if temp_max > total_max:
            total_max = int(temp_max)
    return [total_max]


# path to the local test files
path = "testdata/DnA-maximum-subarray-sum/"
input_files = [os.path.join(path, file) for file in os.listdir(path) if file.endswith(".input")]
output_files = [os.path.join(path, file) for file in os.listdir(path) if file.endswith(".output")]
input_files.sort()
output_files.sort()
# inputs from the test files
inputs = read_input()
# outputs generated by the algorithm
start_time = process_time()
outputs = list()
for input in inputs:
    outputs.append(maximum_subarrays_sum(input))
end_time = process_time()

judge.run(output_files, outputs, end_time - start_time)
