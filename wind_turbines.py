#!/usr/bin/env python3
import os
import judge
from time import process_time


def read_input():
    inputs = list()  # a list containing inputs from all files
    for file in input_files:
        input = list()  # input from a single file
        with open(file) as fh:
            for i in range(0, int(fh.readline())):
                D = int(fh.readline().split()[1])
                d = [int(i) for i in fh.readline().split()]
                e = [int(i) for i in fh.readline().split()]
                input.append((D, d, e))
        inputs.append(input)
    return inputs


def max_energy_yield(input):
    """calculates the maximal total energy yield"""
    D = input[0]  # minimal distance between two turbines
    d = input[1]  # distances of the turbines from the start
    e = input[2]  # energy produced by the associated turbine
    DP = [0 for i in range(0, len(d))]  # DP[i] holds the maximal energy yield up to position i
    DP[0] = e[0]
    for i in range(1, len(d)):
        # find the first turbine that's more than D meters before position i
        j = i
        while d[i] - d[j] < D and j > -1:
            j -= 1
        if j == -1:  # no previous turbine exists
            DP[i] = max(e[i], DP[i - 1])
        else:
            DP[i] = max(e[i] + DP[j], DP[i - 1])
    return DP[len(DP) - 1]  # last entry holds the maximal energy yield


# path to the local test files
path = "testdata/DnA-wind-turbines/"
input_files = [os.path.join(path, file) for file in os.listdir(path) if file.endswith(".input")]
output_files = [os.path.join(path, file) for file in os.listdir(path) if file.endswith(".output")]
input_files.sort()
output_files.sort()
# inputs from the test files
inputs = read_input()
# outputs generated by the algorithm
start_time = process_time()
outputs = list()
for input in inputs:
    outputs.append([max_energy_yield(case) for case in input])
end_time = process_time()

judge.run(output_files, outputs, end_time - start_time)
